// This file was autogenerated and should not be edited manually.
// Check the `codegen` command in the `tauri-store-cli` crate.

use serde::{Deserialize, Serialize};
use std::time::Duration;
use tauri::{AppHandle, WebviewUrl, WebviewWindowBuilder};
use tauri_plugin_pinia::{ManagerExt, SaveStrategy};

#[derive(Clone, Debug, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
struct CounterStore {
  counter: i32,
}

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
  tauri::Builder::default()
    .plugin(tauri_plugin_process::init())
    .plugin(tauri_plugin_shell::init())
    .plugin(tauri_plugin_window_state::Builder::new().build())
    .plugin(
      tauri_plugin_pinia::Builder::new()
        .default_save_strategy(SaveStrategy::throttle_secs(3))
        .autosave(Duration::from_secs(60))
        .pretty(true)
        .build(),
    )
    .setup(|app| {
      let handle = app.handle();
      (1..=3).for_each(|id| open_window(handle, id));
      Ok(())
    })
    .invoke_handler(tauri::generate_handler![
      get_counter,
      print_store,
      try_get_counter,
      try_store_state
    ])
    .run(tauri::generate_context!())
    .unwrap();
}

fn open_window(app: &AppHandle, id: u8) {
  let label = format!("window-{id}");
  let url = WebviewUrl::App("index.html".into());
  WebviewWindowBuilder::new(app, &label, url)
    .title(label)
    .inner_size(300.0, 500.0)
    .resizable(true)
    .maximizable(true)
    .minimizable(true)
    .visible(true)
    .always_on_top(true)
    .build()
    .unwrap();
}

#[tauri::command]
async fn get_counter(app: AppHandle) -> Option<i32> {
  app
    .pinia()
    .get("counter-store", "counter")
    .and_then(|counter| serde_json::from_value(counter).ok())
}

#[tauri::command]
async fn print_store(app: AppHandle) {
  let state = app.pinia().state("counter-store").unwrap();

  println!("{state:?}");
}

#[tauri::command]
async fn try_get_counter(app: AppHandle) -> i32 {
  app
    .pinia()
    .try_get::<i32>("counter-store", "counter")
    .unwrap()
}

#[tauri::command]
async fn try_store_state(app: AppHandle) -> CounterStore {
  app
    .pinia()
    .try_state::<CounterStore>("counter-store")
    .unwrap()
}
