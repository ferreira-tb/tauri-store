use super::{Generator, OutputContext};
use crate::path::{assets_plugin_rs_dir, crate_commands_dir, crate_src_dir};
use anyhow::Result;
use colored::Colorize;
use std::path::Path;
use std::time::Instant;

pub(super) fn generate() -> Result<()> {
  let start = Instant::now();
  println!("{}", "generating crate code".cyan());

  let assets = assets_plugin_rs_dir();
  generate_plugin(&assets)?;
  generate_manager(&assets)?;
  generate_commands(&assets)?;
  generate_lib(&assets)?;

  let duration = start.elapsed();
  println!("{}", format!("done in {duration:?}").green());

  Ok(())
}

fn generate_plugin(assets: &Path) -> Result<()> {
  let input = assets.join("plugin.rs");
  let output = |ctx: OutputContext<'_>| {
    let dir = crate_src_dir(ctx.target);
    dir.join(format!("{}.rs", ctx.name))
  };

  Generator::builder(&input, &output)
    .build()
    .generate()
}

fn generate_manager(assets: &Path) -> Result<()> {
  let input = assets.join("manager.rs");
  let output = |ctx: OutputContext<'_>| {
    let dir = crate_src_dir(ctx.target);
    dir.join("manager.rs")
  };

  Generator::builder(&input, &output)
    .build()
    .generate()
}

fn generate_commands(assets: &Path) -> Result<()> {
  let input = assets.join("commands.rs");
  let output = |ctx: OutputContext<'_>| {
    let dir = crate_commands_dir(ctx.target);
    dir.join("autogenerated.rs")
  };

  Generator::builder(&input, &output)
    .build()
    .generate()
}

fn generate_lib(assets: &Path) -> Result<()> {
  let input = assets.join("lib.rs");
  let output = |ctx: OutputContext<'_>| {
    let dir = crate_src_dir(ctx.target);
    dir.join("lib.rs")
  };

  Generator::builder(&input, &output)
    .build()
    .generate()
}
