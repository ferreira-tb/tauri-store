use super::util::consts::{PLUGIN_FULL_NAME, STORE_COLLECTION};
use super::util::replace::store_collection;
use super::util::transform::{prepend_autogenerated, remove_nocheck};
use super::{Context, Generator};
use crate::path::{assets_dir, package_src_dir};
use crate::plugin::Plugin;
use anyhow::Result;
use colored::Colorize;
use convert_case::Case;
use std::path::{Path, PathBuf};
use std::time::Instant;

pub(super) fn generate() -> Result<()> {
  let start = Instant::now();
  println!("{}", "generating package code".cyan());

  let assets = assets_plugin_ts_dir();
  generate_commands(&assets)?;

  let duration = start.elapsed();
  println!("{}", format!("done in {duration:?}").green());

  Ok(())
}

fn generate_commands(assets: &Path) -> Result<()> {
  let input = assets.join("commands.ts");
  let output = |ctx: Context<'_>| {
    let dir = package_commands_dir(ctx.plugin);
    dir.join("autogenerated.ts").into()
  };

  Generator::builder(&input, &output)
    .transform(&[&remove_nocheck, &prepend_autogenerated])
    .replace(&[
      (PLUGIN_FULL_NAME, &|it| it.as_ref().to_owned()),
      (STORE_COLLECTION, &|it| store_collection(it, Case::Pascal)),
      ("__REGISTERED_PLUGIN_NAME__", &|it| it.name().to_owned()),
    ])
    .generate()
}

fn assets_plugin_ts_dir() -> PathBuf {
  assets_dir().join("plugin-ts")
}

fn package_commands_dir(plugin: Plugin) -> PathBuf {
  let mut dir = package_src_dir(plugin);
  if matches!(plugin, Plugin::Svelte) {
    dir.push("lib");
  }

  dir.join("commands")
}
