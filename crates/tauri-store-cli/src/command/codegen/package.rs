use super::{
  prepend_autogenerated, read_asset, write_file, KEBAB_PLUGIN_FULL_NAME, PASCAL_PLUGIN_NAME,
  PLUGIN_NAME,
};
use crate::path::{assets_dir, package_commands_dir};
use crate::target::Target;
use anyhow::Result;
use convert_case::{Case, Casing};
use std::path::Path;
use strum::VariantArray;

pub(super) fn generate() -> Result<()> {
  let assets_dir = assets_dir();
  generate_commands(&assets_dir)
}

fn generate_commands(assets_dir: &Path) -> Result<()> {
  let commands_ts = assets_dir.join("commands.ts");
  let mut contents = read_asset(&commands_ts)?;

  contents
    .replace("// @ts-nocheck", "")
    .trim_start()
    .clone_into(&mut contents);

  prepend_autogenerated(&mut contents);

  for package in Target::VARIANTS {
    let Some(plugin_name) = package.plugin_name() else {
      continue;
    };

    let contents = contents
      .replace(PASCAL_PLUGIN_NAME, &plugin_name.to_case(Case::Pascal))
      .replace(KEBAB_PLUGIN_FULL_NAME, package.as_ref())
      .replace(PLUGIN_NAME, plugin_name);

    let dir = package_commands_dir(*package);
    let autogenerated = dir.join("autogenerated.ts");
    write_file(&autogenerated, &contents)?;
  }

  Ok(())
}
