use super::{Codegen, Generator, OutputContext};
use crate::path::{assets_dir, crate_dir};
use crate::target::Target;
use anyhow::Result;
use colored::Colorize;
use std::fs;
use std::path::{Path, PathBuf};
use std::time::Instant;
use strum::VariantArray;

pub(super) fn generate(codegen: &Codegen) -> Result<()> {
  let start = Instant::now();
  println!("{}", "generating permissions".cyan());

  if codegen.cleanup {
    cleanup_permissions()?;
  }

  let assets = assets_permissions_dir();
  generate_build_rs(&assets)?;
  generate_default(&assets)?;

  let duration = start.elapsed();
  println!("{}", format!("done in {duration:?}").green());

  Ok(())
}

fn cleanup_permissions() -> Result<()> {
  for target in Target::VARIANTS {
    if target.is_plugin() {
      let dir = permissions_dir(*target);
      let autogenerated = dir.join("autogenerated");
      let schemas = dir.join("schemas");

      fs::remove_dir_all(autogenerated)?;
      fs::remove_dir_all(schemas)?;
    };
  }

  Ok(())
}

fn generate_build_rs(assets: &Path) -> Result<()> {
  let input = assets.join("build.rs");
  let output = |ctx: OutputContext<'_>| {
    let dir = crate_dir(ctx.target);
    dir.join("build.rs")
  };

  Generator::builder(&input, &output)
    .build()
    .generate()
}

fn generate_default(assets: &Path) -> Result<()> {
  let input = assets.join("default.toml");
  let output = |ctx: OutputContext<'_>| {
    let dir = permissions_dir(ctx.target);
    dir.join("default.toml")
  };

  Generator::builder(&input, &output)
    .transform(&[])
    .build()
    .generate()
}

fn assets_permissions_dir() -> PathBuf {
  assets_dir().join("permissions")
}

fn permissions_dir(target: Target) -> PathBuf {
  crate_dir(target).join("permissions")
}
