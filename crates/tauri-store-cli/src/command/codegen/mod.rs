mod example;
mod krate;
mod package;

use anyhow::{Context, Result};
use clap::Args;
use std::fs;
use std::path::Path;

const PLUGIN_NAME: &str = "PLUGIN_NAME";
const PASCAL_PLUGIN_NAME: &str = "PASCAL_PLUGIN_NAME";
const KEBAB_PLUGIN_FULL_NAME: &str = "KEBAB_PLUGIN_FULL_NAME";

const AUTOGENERATED_WARNING: &str = "
// This file was autogenerated and should not be edited manually.
// Check the `codegen` command in the `tauri-store-cli` crate.\n
";

#[derive(Debug, Args)]
pub struct Codegen;

impl Codegen {
  #[expect(clippy::unused_self)]
  pub fn run(&self) -> Result<()> {
    krate::generate()?;
    package::generate()?;
    example::generate()?;

    Ok(())
  }
}

fn read_asset(path: &Path) -> Result<String> {
  fs::read_to_string(path)
    .with_context(|| format!("failed to read asset: {}", path.display()))
    .map_err(Into::into)
}

fn write_file(path: &Path, contents: &str) -> Result<()> {
  fs::write(path, contents)
    .with_context(|| format!("failed to write file: {}", path.display()))
    .map_err(Into::into)
}

fn prepend_autogenerated(contents: &mut String) {
  let warning = AUTOGENERATED_WARNING.trim_start();
  contents.insert_str(0, warning);
}
