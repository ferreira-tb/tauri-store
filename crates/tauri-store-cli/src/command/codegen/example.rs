use super::{prepend_autogenerated, read_asset, write_file, PLUGIN_NAME};
use crate::path::{assets_dir, examples_shared_rust_impl_dir};
use crate::target::Target;
use anyhow::Result;
use colored::Colorize;
use std::path::Path;
use std::time::Instant;
use strum::VariantArray;

pub(super) fn generate() -> Result<()> {
  let start = Instant::now();
  println!("{}", "generating example code".cyan());

  let assets_dir = assets_dir();
  generate_shared_commands(&assets_dir)?;

  let duration = start.elapsed();
  println!("{}", format!("done in {duration:?}").green());

  Ok(())
}

fn generate_shared_commands(assets_dir: &Path) -> Result<()> {
  let commands_rs = assets_dir.join("examples/commands.rs");
  let mut contents = read_asset(&commands_rs)?;
  prepend_autogenerated(&mut contents);

  let dir = examples_shared_rust_impl_dir();
  for krate in Target::VARIANTS {
    let Some(plugin_name) = krate.plugin_name() else {
      continue;
    };

    let commands = dir.join(format!("{plugin_name}.rs"));
    let contents = contents.replace(PLUGIN_NAME, plugin_name);
    write_file(&commands, &contents)?;
  }

  Ok(())
}
